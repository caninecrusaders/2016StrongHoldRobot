// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.TestRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4980.TestRobot.Robot;

/**
 *
 */
public class ShooterMotorAngle extends Command {
	public double m_timeOut = 1.0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ShooterMotorAngle() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooterElevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	setTimeout(m_timeOut);
    	Robot.shooterElevator.analogTrigger.setLimitsVoltage(3.5,5.0);
        Robot.shooterElevator.analogTrigger.setFiltered(true);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.shooterElevator.ShooterElevatorUp();
    	Robot.shooterElevator.UpdateCounter( Robot.shooterElevator.analogTrigger.getInWindow()); 
    	SmartDashboard.putNumber(   "Bosch current count",            Robot.shooterElevator.currentCount);
    	  SmartDashboard.putBoolean(   "inWindow",          Robot.shooterElevator.analogTrigger.getInWindow());
    	}

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	double counterTarget = 90.0;
    	SmartDashboard.putNumber(   "elevatorTarget", counterTarget);
    	if(Robot.shooterElevator.currentCount >= counterTarget){
    		return true;
    	}
    	//if(m_timeout < 0)
		//return false;
       return isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.shooterElevator.Stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
