// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.TestRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4980.TestRobot.Robot;

/**
 *
 */
public class ControlAngle extends Command {
	

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ControlAngle() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.shooterElevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.shooterElevator.analogTrigger.setLimitsVoltage(3.5,5.0);
        Robot.shooterElevator.analogTrigger.setFiltered(true);
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	double count = Robot.shooterElevator.currentCount;
    	double range = (Robot.oi.getJoystick1().getRawAxis(3)+1.0)/2.0;
    	double maxCount = 70.0;
    	double setPoint = maxCount*range;
    	SmartDashboard.putNumber(   "Set Point",           setPoint);
    	SmartDashboard.putNumber(   "Range",            range);
    	SmartDashboard.putNumber(   "count",            count);
    
    	
   	 
   	 
    	if(count > maxCount||count < 0.0){
    		Robot.shooterElevator.Stop();
    		SmartDashboard.putString("Control Angle Status", "Exceeds Limits");
    		
    	}
    	else if(count > setPoint-3.0 && count < setPoint +3.0){
    		Robot.shooterElevator.Stop();
    		SmartDashboard.putString("Control Angle Status", "Reached Target");
    	}
    	else if(count > setPoint){
    		Robot.shooterElevator.ShooterElevatorDown();
    		Robot.shooterElevator.UpdateCounter( Robot.shooterElevator.analogTrigger.getInWindow()); 
    		SmartDashboard.putString("Control Angle Status", "Moving Down");
    		
    	}
    	else if(count < setPoint){
    		Robot.shooterElevator.ShooterElevatorUp();
    		Robot.shooterElevator.UpdateCounter( Robot.shooterElevator.analogTrigger.getInWindow()); 
    		SmartDashboard.putString("Control Angle Status", "Moving Up");
        	
       	 
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.shooterElevator.Stop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    	
    }
}
