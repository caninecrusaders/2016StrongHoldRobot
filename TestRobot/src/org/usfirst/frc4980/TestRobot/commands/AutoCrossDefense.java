// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.TestRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4980.TestRobot.Robot;

import com.kauailabs.navx.frc.AHRS;

/**
 *
 */
public class AutoCrossDefense extends Command {
	public double m_timeOut = 3.0;
	public final int kStart = 0;
    public final int kUp = 1;
	//public final int kFlat = 2;
	public final int kDown = 3;
	public final int kEnd = 4;
	public int state = kStart;
	private double speed = 0.0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutoCrossDefense() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveSystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	setTimeout(m_timeOut);
    	state = kStart;
    	AHRS ahrs = Robot.oi.getAHRS();
    	if(ahrs!=null){
	    	double sp = ahrs.getYaw();
	    	//Correct for a setPoint out of range
	    	if(sp > 180){
	    		sp =-180+(sp-180);
	    	}else if (sp < -180){
	    		sp = 180+(sp+180);
	    	}
	    	//SmartDashboard.putString(   "TurnToAngle-Start", "start");
	    	SmartDashboard.putNumber(   "TurnToAngle-SetPoint", sp);
	    	Robot.driveSystem.getPIDController().setSetpoint(sp);
	    	Robot.driveSystem.getPIDController().setOutputRange(0.0, 1.0);//Sets the the MIN and MAX values to write to output
	        
	    	Robot.driveSystem.getPIDController().setAbsoluteTolerance(3.0);
	    	Robot.driveSystem.getPIDController().enable();
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	AHRS ahrs = Robot.oi.getAHRS();
    	double buffer = 0.4;
    	
    	if(ahrs!=null){
    		if(Robot.obstacleChoice == Robot.kObstacleMoat){
    			speed = -1.0;
    		}
    		else if(Robot.obstacleChoice == Robot.kObstacleRamparts){
    			speed = -1.0;
    		}
    		else if(Robot.obstacleChoice == Robot.kObstacleRockWall){
    			speed = -1.0;
    		}
    		else if(Robot.obstacleChoice == Robot.kObstacleRoughTerrain){
    			speed = -.9;
    		}
    		else if(Robot.obstacleChoice == Robot.kObstacleLowBar){
    			speed = .7;
    			buffer = 0.6;
    			
    		}else{
    			speed = -.9;
    		}
    		SmartDashboard.putNumber(   "Speed Average", speed);
    		Robot.driveSystem.driveForward(speed);
    		double roll = ahrs.getRoll();
    		if(roll < -buffer && state == kStart){
    			state = kUp;
    			
    		}
    		
    		else if(roll > buffer && state == kUp){
    			
    			state = kDown;
    			
    		}
    		else if(roll > -buffer && roll < buffer && state == kDown){
    			state = kEnd;
    			
    		}
    		SmartDashboard.putNumber(   "Over Defense State", state);
    	
    			
    		}
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
//    	SmartDashboard.putBoolean(   "Over Defense Done", state==kEnd);
//    	if(state == kEnd){
//    		return true;
//    }
    	
    		return isTimedOut();
    	
        
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.driveSystem.stop();
    	Robot.driveSystem.getPIDController().disable();

    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
