// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.TestRobot.commands;

import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4980.TestRobot.Robot;

/**
 *
 */
public class CylinderMedium extends Command {
	private double m_timeout = 5.0;
	private double m_endTime;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CylinderMedium() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.climber);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	setTimeout(m_timeout);
    	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(m_endTime == 0.0){
    		m_endTime = Timer.getFPGATimestamp()+0.05;
    	}
    	
    	
    	
    	if(m_endTime <= Timer.getFPGATimestamp() ){
    		SmartDashboard.putString("Climber Position", "Stop Medium");
    		//Robot.climber.ClimberHold();
    		if(Robot.climber.climberPosition == Robot.climber.kHigh){
    			Robot.climber.ClimberDown();
    		}
    		else if(Robot.climber.climberPosition == Robot.climber.kLow){
    			Robot.climber.ClimberUp();
    		}
    		}
    	else {
    		SmartDashboard.putString("Climber Position", "Go Medium");
    		if(Robot.climber.climberPosition == Robot.climber.kHigh){
        		Robot.climber.ClimberDown();
        	}
        	else if(Robot.climber.climberPosition == Robot.climber.kLow){
        		Robot.climber.ClimberUp();
        	}
        	else {
        		Robot.climber.ClimberStop();
        		end();
        	}
    	}
    	
    
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	if(m_timeout < 0){
    		return false;
    		}
    	
       return isTimedOut();
    }

    // Called once after isFinished returns true
    protected void end() {
    	m_endTime = 0.0;
    	
    	Robot.climber.climberPosition = Robot.climber.kMed;
    	Robot.climber.ClimberStop();
    	SmartDashboard.putString("Climber Position", "At Medium Position");
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
