// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.TestRobot.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4980.TestRobot.Robot;

import com.kauailabs.navx.frc.AHRS;

/**
 *
 */
public class FieldOrientation extends Command {
	private double m_orientation=0.0;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	public FieldOrientation(double orientation){
		m_orientation = orientation;
		
	}
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public FieldOrientation() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveSystem);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    
    	
    	double sp = Robot.startingYaw + m_orientation;
    	//Correct for a setPoint out of range
        double kp = 0.3; //0.5
    	double ki = 0.0; //0.3
    	double kd = 0.0; //1.0
    	Robot.driveSystem.getPIDController().setPID(kp,ki,kd);//Set the PID controller gains.
    	//Robot.driveSystem.getPIDController().setPID(p, i, d, f);
    	if(sp > 180){
    		sp =-180+(sp-180);
    	}else if (sp < -180){
    		sp = 180+(sp+180);
    	}
    	SmartDashboard.putString(   "TurnToAngle-Start", "start");
    	SmartDashboard.putNumber(   "TurnToAngle-SetPoint", sp);
    	Robot.driveSystem.getPIDController().setSetpoint(sp);
    	Robot.driveSystem.getPIDController().setOutputRange(-1.0, 1.0);//Sets the the MIN and MAX values to write to output        
    	Robot.driveSystem.getPIDController().setAbsoluteTolerance(3.0);
    	Robot.driveSystem.getPIDController().enable();
    	
    	}
    

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
    	//SmartDashboard.putNumber(   "TurnToAngle-Position", Robot.driveSystem.getPosition());
       return Robot.driveSystem.getPIDController().onTarget();
    	//return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.isFieldOrienting = false;
    	Robot.driveSystem.stop();
    	Robot.driveSystem.getPIDController().disable();
 
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	end();
    }
}
