// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.TestRobot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveSystemRightRear;
    public static SpeedController driveSystemLeftFront;
    public static SpeedController driveSystemLeftRear;
    public static SpeedController driveSystemRightFront;
    public static RobotDrive driveSystemRobotDrive41;
    public static AnalogInput driveSystemRangeFinder;
    public static Ultrasonic driveSystemUltraRangeFinder;
    public static AnalogInput driveSystemPressureGauge;
    public static Ultrasonic driveSystemUltraRangeFinderBack;
    public static Ultrasonic driveSystemUltraRangeFinderLeft;
    public static Ultrasonic driveSystemUltraRangeFinderRight;
    public static Servo cameratilt;
    public static Servo camerapan;
    public static AnalogInput shooterElevatorReclinerHalofect;
    public static SpeedController shooterElevatorHeightControlShooterLeft;
    public static DoubleSolenoid shooterElevatorDoubleShooterTrigger;
    public static SpeedController shooterElevatorHeightControlShooterRight;
    public static DigitalInput shooterElevatorUpperSwitch;
    public static DigitalInput shooterElevatorLowerSwitch;
    public static AnalogInput shooterElevatorShooterPot;
    public static CANTalon shooterWheelsCANTalonLeft;
    public static CANTalon shooterWheelsCANTalonRight;
    public static DoubleSolenoid climberDoubleSolenoidClimber;
    public static SpeedController climberLeftMotor;
    public static SpeedController climberRightMotor;
    public static Solenoid climberSolenoidPivotUp;
    public static Solenoid climberSolenoidPivotDown;
    public static Solenoid climberSingleSolenoidClimbWheels;
    public static DoubleSolenoid defensiveArmDoubleSolenoidDefensiveArm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  //  public static AnalogPotentiometer shooterElevatorShooterPot;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveSystemRightRear = new Talon(3);
        LiveWindow.addActuator("DriveSystem", "RightRear", (Talon) driveSystemRightRear);
        
        driveSystemLeftFront = new Talon(0);
        LiveWindow.addActuator("DriveSystem", "LeftFront", (Talon) driveSystemLeftFront);
        
        driveSystemLeftRear = new Talon(1);
        LiveWindow.addActuator("DriveSystem", "LeftRear", (Talon) driveSystemLeftRear);
        
        driveSystemRightFront = new Talon(2);
        LiveWindow.addActuator("DriveSystem", "RightFront", (Talon) driveSystemRightFront);
        
        driveSystemRobotDrive41 = new RobotDrive(driveSystemLeftFront, driveSystemLeftRear,
              driveSystemRightFront, driveSystemRightRear);
        
        driveSystemRobotDrive41.setSafetyEnabled(true);
        driveSystemRobotDrive41.setExpiration(0.1);
        driveSystemRobotDrive41.setSensitivity(0.5);
        driveSystemRobotDrive41.setMaxOutput(1.0);

        driveSystemRangeFinder = new AnalogInput(0);
        LiveWindow.addSensor("DriveSystem", "Range Finder", driveSystemRangeFinder);
        
        driveSystemUltraRangeFinder = new Ultrasonic(2, 3);
        LiveWindow.addSensor("DriveSystem", "UltraRangeFinder", driveSystemUltraRangeFinder);
        
        driveSystemPressureGauge = new AnalogInput(2);
        LiveWindow.addSensor("DriveSystem", "PressureGauge", driveSystemPressureGauge);
        
        driveSystemUltraRangeFinderBack = new Ultrasonic(4, 5);
        LiveWindow.addSensor("DriveSystem", "UltraRangeFinderBack", driveSystemUltraRangeFinderBack);
        
        driveSystemUltraRangeFinderLeft = new Ultrasonic(6, 7);
        LiveWindow.addSensor("DriveSystem", "UltraRangeFinderLeft", driveSystemUltraRangeFinderLeft);
        
        driveSystemUltraRangeFinderRight = new Ultrasonic(0, 1);
        LiveWindow.addSensor("DriveSystem", "UltraRangeFinderRight", driveSystemUltraRangeFinderRight);
        
        cameratilt = new Servo(8);
        LiveWindow.addActuator("Camera", "tilt", cameratilt);
        
        camerapan = new Servo(9);
        LiveWindow.addActuator("Camera", "pan", camerapan);
        
        shooterElevatorReclinerHalofect = new AnalogInput(1);
        LiveWindow.addSensor("Shooter Elevator", "Recliner Halofect", shooterElevatorReclinerHalofect);
        
        shooterElevatorHeightControlShooterLeft = new Talon(7);
        LiveWindow.addActuator("Shooter Elevator", "Height Control Shooter Left", (Talon) shooterElevatorHeightControlShooterLeft);
        
        shooterElevatorDoubleShooterTrigger = new DoubleSolenoid(0, 0, 4);
        LiveWindow.addActuator("Shooter Elevator", "DoubleShooterTrigger", shooterElevatorDoubleShooterTrigger);
        
        shooterElevatorHeightControlShooterRight = new Talon(6);
        LiveWindow.addActuator("Shooter Elevator", "Height Control Shooter Right", (Talon) shooterElevatorHeightControlShooterRight);
        
        shooterElevatorUpperSwitch = new DigitalInput(9);
        LiveWindow.addSensor("Shooter Elevator", "UpperSwitch", shooterElevatorUpperSwitch);
        
        shooterElevatorLowerSwitch = new DigitalInput(8);
        LiveWindow.addSensor("Shooter Elevator", "LowerSwitch", shooterElevatorLowerSwitch);
        
        shooterElevatorShooterPot = new AnalogInput(3);
        LiveWindow.addSensor("Shooter Elevator", "ShooterPot", shooterElevatorShooterPot);
        
        shooterWheelsCANTalonLeft = new CANTalon(1);
        LiveWindow.addActuator("ShooterWheels", "CAN Talon Left", shooterWheelsCANTalonLeft);
        
        shooterWheelsCANTalonRight = new CANTalon(2);
        LiveWindow.addActuator("ShooterWheels", "CAN Talon Right", shooterWheelsCANTalonRight);
        
        climberDoubleSolenoidClimber = new DoubleSolenoid(0, 1, 5);
        LiveWindow.addActuator("Climber", "Double Solenoid Climber", climberDoubleSolenoidClimber);
        
        climberLeftMotor = new Talon(4);
        LiveWindow.addActuator("Climber", "LeftMotor", (Talon) climberLeftMotor);
        
        climberRightMotor = new Talon(5);
        LiveWindow.addActuator("Climber", "RightMotor", (Talon) climberRightMotor);
        
        climberSolenoidPivotUp = new Solenoid(0, 2);
        LiveWindow.addActuator("Climber", "SolenoidPivotUp", climberSolenoidPivotUp);
        
        climberSolenoidPivotDown = new Solenoid(0, 6);
        LiveWindow.addActuator("Climber", "SolenoidPivotDown", climberSolenoidPivotDown);
        
        climberSingleSolenoidClimbWheels = new Solenoid(1, 0);
        LiveWindow.addActuator("Climber", "SingleSolenoidClimbWheels", climberSingleSolenoidClimbWheels);
        
        defensiveArmDoubleSolenoidDefensiveArm = new DoubleSolenoid(0, 3, 7);
        LiveWindow.addActuator("DefensiveArm", "DoubleSolenoidDefensiveArm", defensiveArmDoubleSolenoidDefensiveArm);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
     //   shooterElevatorShooterPot = new AnalogPotentiometer(3);
      //  LiveWindow.addSensor("Shooter Elevator Shooter Pot", "Shooter Pot", shooterElevatorShooterPot);
        
      //  climberDoubleSolenoid2.set(DoubleSolenoid.Value.kOff);
        climberDoubleSolenoidClimber.set(DoubleSolenoid.Value.kOff);
        shooterElevatorDoubleShooterTrigger.set(DoubleSolenoid.Value.kOff);
    }
}
