// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.TestRobot.subsystems;

import org.usfirst.frc4980.TestRobot.Robot;
import org.usfirst.frc4980.TestRobot.RobotMap;
import org.usfirst.frc4980.TestRobot.commands.*;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.AnalogTrigger;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Preferences;



/**
 *
 */
public class ShooterElevator extends Subsystem {
	public final AnalogTrigger analogTrigger = new AnalogTrigger(1);
	public double currentCount = 0.0;//Preferences.getInstance().getDouble("shooterElevatorCurrentCount",0.0);
	public double currentDirection = 1.0;
	public boolean currentState = true;
	
			

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	// private final DigitalInput upperSwitch = RobotMap.shooterElevatorUpperSwitch;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final AnalogInput reclinerHalofect = RobotMap.shooterElevatorReclinerHalofect;
    private final SpeedController heightControlShooterLeft = RobotMap.shooterElevatorHeightControlShooterLeft;
    private final DoubleSolenoid doubleShooterTrigger = RobotMap.shooterElevatorDoubleShooterTrigger;
    private final SpeedController heightControlShooterRight = RobotMap.shooterElevatorHeightControlShooterRight;
    private final DigitalInput upperSwitch = RobotMap.shooterElevatorUpperSwitch;
    private final DigitalInput lowerSwitch = RobotMap.shooterElevatorLowerSwitch;
    private final AnalogInput shooterPot = RobotMap.shooterElevatorShooterPot;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public ShooterElevator(){
    	doubleShooterTrigger.set(DoubleSolenoid.Value.kOff);
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        //setDefaultCommand(new ControlAngle());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
   
    public void Stop(){
    	heightControlShooterLeft.set(0.0);
    	heightControlShooterRight.set(0.0);
    }
    public void Shoot(){
    	doubleShooterTrigger.set(DoubleSolenoid.Value.kReverse);
    }
    public void ShootOff() {
    	doubleShooterTrigger.set(DoubleSolenoid.Value.kForward);
    	
    }
    public void ShooterElevatorUp() {
    	SmartDashboard.putBoolean(   "Upper Switch",           upperSwitch.get());
    	if(upperSwitch.get()){
    		currentCount = 70.0;
    	}else{
    		heightControlShooterLeft.set(-.5);
    		heightControlShooterRight.set(.5);
    		currentDirection = 1.0;
    	}
    	
    }
    public void ShooterElevatorDown(){
    	SmartDashboard.putBoolean(   "Lower Switch",           lowerSwitch.get());
    	if(lowerSwitch.get()){
    		currentCount = 0.0;
    	}else{
    		heightControlShooterLeft.set(.5);
    		heightControlShooterRight.set(-.5);
    		currentDirection = -1.0;
    	}
    	
    }
    public void UpdateCounter(boolean inWindow){
    	if(inWindow != currentState){
    		currentState = inWindow;
    		currentCount = currentCount + currentDirection;
            //Preferences.getInstance().putDouble("shooterElevatorCurrentCount",currentCount);
    	}
    	
    	
    	
    }
    public double CountFromAngle(double angle){
    	return (174.9*angle)/360.0;
    }
    public void CountIsHigh(){
    	currentCount = 70.0;
    	SmartDashboard.putNumber(   "Bosch current count",            currentCount);
    
    }
    public void CountIsLow(){
    	
    	currentCount = 0.0;
    	SmartDashboard.putNumber(   "Bosch current count",            currentCount);
    }
    
}


