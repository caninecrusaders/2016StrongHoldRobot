// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.TestRobot.subsystems;

import org.usfirst.frc4980.TestRobot.Robot;
import org.usfirst.frc4980.TestRobot.RobotMap;
import org.usfirst.frc4980.TestRobot.commands.*;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */

public class DriveSystem extends PIDSubsystem {
	private double speedDamper = 0.0;
	public boolean driveInverted = false;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController rightRear = RobotMap.driveSystemRightRear;
    private final SpeedController leftFront = RobotMap.driveSystemLeftFront;
    private final SpeedController leftRear = RobotMap.driveSystemLeftRear;
    private final SpeedController rightFront = RobotMap.driveSystemRightFront;
    private final RobotDrive robotDrive41 = RobotMap.driveSystemRobotDrive41;
    private final AnalogInput rangeFinder = RobotMap.driveSystemRangeFinder;
    private final Ultrasonic ultraRangeFinder = RobotMap.driveSystemUltraRangeFinder;
    private final AnalogInput pressureGauge = RobotMap.driveSystemPressureGauge;
    private final Ultrasonic ultraRangeFinderBack = RobotMap.driveSystemUltraRangeFinderBack;
    private final Ultrasonic ultraRangeFinderLeft = RobotMap.driveSystemUltraRangeFinderLeft;
    private final Ultrasonic ultraRangeFinderRight = RobotMap.driveSystemUltraRangeFinderRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Initialize your subsystem here
    public DriveSystem() {
    	
    	super("DriveSystem", 0.5, 0.3, 1.0);//Must be first line of constructor!
    	ultraRangeFinder.setAutomaticMode(true);
    	ultraRangeFinder.setEnabled(true);
    	ultraRangeFinderBack.setAutomaticMode(true);
    	ultraRangeFinderBack.setEnabled(true);
        //double kp = 0.0001;
    	//double ki = 0.001;
    	//double kd = 0.01;
    	//getPIDController().setPID(kp,ki,kd);//Set the PID controller gains.
        this.setInputRange(-180.0, 180.0);//Sets the MIN and MAX values expected from the input and setPoint!
        this.setOutputRange(-1.0, 1.0);//Sets the the MIN and MAX values to write to output
        //this.setAbsoluteTolerance(5.0);//Set the absolute error which is considered tolerable for use with OnTarget()
        //this.setPercentTolerance(10);//Set the percentage error which is considered tolerable for use with OnTarget()
        //this.setSetpoint(45);//Set the where to go to, clears GetAvgError()
        getPIDController().setContinuous(true);//True=input is continuous, calculates shortest route to setPoint()
        //this.enable();//Begin running the PID Controller.
        
        LiveWindow.addActuator("DriveSystem", "PID DriveSystem", getPIDController());
        
       // getPIDController().startLiveWindowMode();//Start having this object automatically respond to value changes.
    }

    public void initDefaultCommand() {
    	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new DriveWithJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

    	double yaw = Robot.oi.getAHRS().getYaw();
    	SmartDashboard.putNumber(   "TurnToAngle-PIDInput",yaw);
        
        return yaw;
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	SmartDashboard.putNumber(   "TurnToAngle-PIDOutput",output);

        robotDrive41.tankDrive(output,-output);
    	//leftFront.set(output);
    	//leftRear.set(output);
    	//rightFront.set(output);
    	//rightRear.set(output);
    }
    
    public void takeJoystickInputs(Joystick xbox, Joystick j){
    	int fieldOrientation = xbox.getPOV();
    	if(fieldOrientation > -1){
    		//Start Field Orientation
    		if(fieldOrientation == 45){
    			FieldOrientation orientationCommand = new FieldOrientation(60);
    			Scheduler.getInstance().removeAll();
    			Scheduler.getInstance().add(orientationCommand);
    			orientationCommand.start();

    		}
    		else if(fieldOrientation == 325){
    			FieldOrientation orientationCommand = new FieldOrientation(300);
    			Scheduler.getInstance().removeAll();
    			Scheduler.getInstance().add(orientationCommand);
    			orientationCommand.start();
        		

    		}
    		else if(fieldOrientation == 135){
    			
    			FieldOrientation orientationCommand = new FieldOrientation(120);
    			Scheduler.getInstance().removeAll();
    			Scheduler.getInstance().add(orientationCommand);
    			orientationCommand.start();
        		

    		}
    		else if(fieldOrientation == 225){
    			FieldOrientation orientationCommand = new FieldOrientation(240);
    			Scheduler.getInstance().removeAll();
    			Scheduler.getInstance().add(orientationCommand);
    			orientationCommand.start();
        		

    		}
    		else {
    		FieldOrientation orientationCommand = new FieldOrientation(fieldOrientation);
    		Scheduler.getInstance().removeAll();
    		Scheduler.getInstance().add(orientationCommand);
    		orientationCommand.start();
    		}
    		Robot.isFieldOrienting = true;
    		return;
    	}
    	if(Robot.isFieldOrienting){
    		return;
    	}
    	
    	double leftSpeed = xbox.getRawAxis(1);
    	double rightSpeed = xbox.getRawAxis(5);
    	speedDamper = j.getRawAxis(3);
       	double damper = ((speedDamper+1.0)/2.0);
    	SmartDashboard.putNumber(   "Speed Damper",           damper);
    	double average;
    	double range = .25;
   	  	if(leftSpeed >= 0 && rightSpeed >= 0){
	    		average = (leftSpeed+rightSpeed)/2.0; 
	    		if(j.getRawButton(11)){
	    			average = average*damper;
	    		}
	    		if(driveInverted){
	    			average = -average;
	    		}
	    		robotDrive41.tankDrive(average, average);
	    		SmartDashboard.putNumber(   "Speed Average",           average);
    	}
    	else if(leftSpeed <= 0 && rightSpeed <= 0){
    		    average = (leftSpeed+rightSpeed)/2.0; 
	    		if(j.getRawButton(11)){
	    			average = average*damper;
	    		}
	    		if(driveInverted){
	    			average = -average;
	    		}
	    		robotDrive41.tankDrive(average, average);
	    		SmartDashboard.putNumber(   "Speed Average",           average);
    	}
   	else {
   		if(j.getRawButton(11)){
			rightSpeed = rightSpeed*damper;
			leftSpeed = leftSpeed*damper;
		}
   		if(driveInverted){
   			robotDrive41.tankDrive(-leftSpeed, -rightSpeed);
		}
   		else{
   			robotDrive41.tankDrive(rightSpeed, leftSpeed);
   		}
    		
    	}
    }
    public void driveTurnRight(double speed){
    	robotDrive41.drive(speed, -speed);
    }
    public void driveTurnLeft(double speed){
    	robotDrive41.drive(-speed, speed);
    }
    
    public void stop(){
    	robotDrive41.drive(0,0);
    }
    
    public void driveForward(double speed){
    	robotDrive41.tankDrive(speed, speed);
    }
    public double getRange(){
    	SmartDashboard.putNumber(   "Distance to Target" ,   ultraRangeFinder.getRangeInches());
    	SmartDashboard.putNumber(   "Distance to Target Back" ,   ultraRangeFinderBack.getRangeInches());
    	double p = 250*(pressureGauge.getVoltage()/5.0)-25;
    	SmartDashboard.putNumber(   "Current Pressure",            p);
    	//SmartDashboard.putNumber(   "Distance to Target-Average" ,  rangeFinder.getAverageVoltage());
    	return ultraRangeFinder.getRangeInches();
    	
    }
    public void driveSpin(double speed){
    	robotDrive41.tankDrive(-speed, speed);
    }
    
}

